<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on S U S H A N T&#39;s</title>
        <link>/posts/</link>
        <description>Recent content in Posts on S U S H A N T&#39;s</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Thu, 16 Dec 2021 00:00:00 +0000</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Abstract Class in Go</title>
            <link>/posts/2021/12/abstract-class-in-go/</link>
            <pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate>
            
            <guid>/posts/2021/12/abstract-class-in-go/</guid>
            <description>What is an Abstract Class? An Abstract Class is the layout of the class. It defines several methods, some concrete and some abstract. The child class extending the abstract class need to implement the abstract methods. It can also override the implementation of a concrete method.
Why use Abstract Class? An abstract class is be used when we want to provide a common interface for different implementations. But those multiple implementations have some methods in common which can be defined in the base class itself and used by all.</description>
            <content type="html"><![CDATA[<h2 id="what-is-an-abstract-class">What is an Abstract Class?</h2>
<p>An <strong>Abstract Class</strong> is the layout of the class.
It defines several methods, some concrete and some abstract.
The child class extending the abstract class need to implement the abstract methods.
It can also override the implementation of a concrete method.</p>
<h2 id="why-use-abstract-class">Why use Abstract Class?</h2>
<p>An abstract class is be used when we want to provide a common interface for different implementations.
But those multiple implementations have some methods in common which can be defined in the base
class itself and used by all.</p>
<p>Consider the following usecase:
Let&rsquo;s say we are coding for a barista and need to write code for creating coffee and tea.
We can have a <code>Beverage</code> abstract class which can implement the common methods: <code>boilWater()</code> and <code>pourInCup()</code>.
Whereas the concrete classes: <code>Tea</code>  and <code>Coffee</code> can implement their own <code>prepareRecipe()</code> method.
<img src="/img/go_abstract_class/usecase.drawio.svg" alt="usecase"></p>
<h2 id="why-is-it-difficult-in-go">Why is it difficult in Go?</h2>
<p>Though Go provides a custom type known as <code>interface</code>  which can be used to provide a common interface for different implementations.
But Go&rsquo;s <code>interface</code> doesnâ€™t have fields and also it doesnâ€™t allow the definition of methods inside it. Any type needs to implements all methods of interface to become of that interface type.</p>
<h2 id="solution">Solution</h2>
<p>We will make use of the <a href="https://go.dev/ref/spec#Struct_types">embedded field type</a> in a struct.</p>
<p>Let&rsquo;s first define the <code>beverage</code> interface.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Go" data-lang="Go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">beverage</span> <span style="color:#66d9ef">interface</span> {
	<span style="color:#a6e22e">boilWater</span>()
	<span style="color:#a6e22e">prepareRecipe</span>()
	<span style="color:#a6e22e">pourInCup</span>()
}
</code></pre></div><p>Next we define a struct - <code>baseBeverage</code> which will implement the common methods of the <code>beverage</code> interface.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Go" data-lang="Go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">baseBeverage</span> <span style="color:#66d9ef">struct</span> {}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">b</span> <span style="color:#a6e22e">baseBeverage</span>) <span style="color:#a6e22e">boilWater</span>() {
	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Boiling water&#34;</span>)
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">b</span> <span style="color:#a6e22e">baseBeverage</span>) <span style="color:#a6e22e">pourInCup</span>() {
	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Pouring in beverage in cup&#34;</span>)
}
</code></pre></div><p>Now we define our concrete beverages, i.e, <code>tea</code> and <code>coffee</code>.
These structs will contain <code>baseBeverage</code> as an embedded field and also implement the methods which is related  to them.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Go" data-lang="Go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">tea</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">baseBeverage</span>
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">t</span> <span style="color:#a6e22e">tea</span>) <span style="color:#a6e22e">prepareRecipe</span>() {
	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Putting tea leaves&#34;</span>)
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">coffee</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">baseBeverage</span>
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">c</span> <span style="color:#a6e22e">coffee</span>) <span style="color:#a6e22e">prepareRecipe</span>() {
	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Putting coffee&#34;</span>)
}
</code></pre></div><p>When struct A contains another struct B as an embedded field, the medthod sets of S include the promoted mehtods with receiver B.
Hence, when <code>tea</code> embeds <code>baseBeverage</code>, all the methods of <code>baseBeverage</code> can be used by objects of <code>tea</code> as well.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Go" data-lang="Go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#a6e22e">t</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tea</span>{}
	<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">boilWater</span>()
	<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">prepareRecipe</span>()
	<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">pourInCup</span>()
}
</code></pre></div><p>This allows us to use an object of struct <code>tea</code> as <code>beverage</code> interface type.</p>
]]></content>
        </item>
        
        <item>
            <title>Why is Reading important?</title>
            <link>/posts/2021/06/why-is-reading-important/</link>
            <pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate>
            
            <guid>/posts/2021/06/why-is-reading-important/</guid>
            <description>Reading is to the mind what exercise is to the body.
 This is a famous quote by Richard Steele and it is 100% accurate. Think of it as trying to hold water in a dirty sieve. The water will definitely flow out from the pores but if you do it repeatedly, it will surely clean the sieve. The same holds with reading. The dirty sieve here is your mind and holding water is reading.</description>
            <content type="html"><![CDATA[<blockquote>
<p>Reading is to the mind what exercise is to the body.</p>
</blockquote>
<p><img src="/img/reading/books.jpg" alt="books"></p>
<p>This is a famous quote by Richard Steele and it is 100% accurate.
Think of it as trying to hold water in a dirty sieve.
The water will definitely flow out from the pores but if you do it repeatedly, it will surely clean the sieve. The same holds with reading.
The dirty sieve here is your mind and holding water is reading.
You might not remember the contents of what you read in the long run but it will definitely clean your mind.</p>
<p><img src="/img/reading/sieve.jpg" alt="sieve"></p>
<p>Reading should be part of one&rsquo;s daily habit.
I myself read atleast 20 pages before going to bed.
It is a gateway to anything and everything.
Reading develops your creativity and imagination.
If you google, you will find out many other benefits of reading ranging from improving concentration to slowing the progress of dementia.</p>
<p>When I say reading, it does not necessarily mean read a book.
It can be anything - a tech blog, an article, documentation of a framework, research paper but definitely not your facebook news feed ðŸ˜›.
If you want to start, I would recommend you to start with <a href="https://www.amazon.in/Atomic-Habits-Proven-Build-Break-ebook/dp/B01N5AX61W">Atomic Habits</a>.
It will not just be your first read but also teach how to build a habit.
So may be you can make reading a habit by reading it!!</p>
<p><img src="/img/reading/paper.png" alt="paper"></p>
<p>Even from  your career perspective you need to keep on improving yourself.
As you gain more experience you are required to know more stuff too.
If you want to be a professional, you should know a sizable chunk of your discipline and always keep increasing the size of that chunk.
The frenetic rate of change in every industry means that people must continue to learn copious quantities just to keep up.
Would you go to a doctor who did not keep current with medical journals or hire a tax lawyer who did not keep current with the tax laws?
So how do you plan to keep up?
By learning, which again implies by reading.</p>
<p>The reason why I am stressing so much on reading is because in my opinion any material is made of data collated from several resources.
The author must have done vast research and finally expressed all his experience and knowledge of that subject in limited words.
So, in order to gain expertise on the subject, where the author spent several months or even years, you can get the same knowledge in maybe days.
I would definitely say that giving it a try is worth it.</p>
]]></content>
        </item>
        
    </channel>
</rss>
